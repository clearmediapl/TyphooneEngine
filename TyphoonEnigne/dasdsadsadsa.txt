/*******************************************************************/
/* Filename:                  CGame.cpp                            */
/* Author:                    Michal Szczepanowski                 */
/* Last modification:         17.05.2006                           */
/* Last revision:             17.05.2006                           */
/* Revised by:                Michal Szczepanowski                 */
/*******************************************************************/


#include "bibloteki.h"
#include "CMap.h"
#include "CGame.h"
#include "CLogger.h"
#include "CVector.h"
#include "CWater.h"
#include "CCamera.h"
#include "CRenderToTexture.h"
#include "CClouds.h"
#include "CMatrix.h"

#include "C3ds.h"

unsigned int a[13];





C3ds *obj = new C3ds(_T("a.3ds"));
CMap *map = new CMap();


CCamera *cam = new CCamera();

// ---------------------------------------------------------
// CGame::CGame()
// constructor
// ---------------------------------------------------------
//
CGame::CGame() : CExtension()
{
	isClicked=false;
	rot = 0;
	log = new CLogger();
	tex = new CTexture();



//	map = new CMap();



}
// ---------------------------------------------------------
// CGame::Init()
// Init game
// ---------------------------------------------------------
//


CLogger *log3;



	float s=-2.5;
void quad(float x, float y, float z)
{


	glScalef(x,y,z);
	
	glBegin(GL_QUADS);
	
		
		glTexCoord2f(0.0f, 0.0f); glNormal3f(-1.0f, -1.0f,  1.0f);glVertex3f(-1.0f, -1.0f,  1.0f);
		glTexCoord2f(1.0f, 0.0f); glNormal3f(1.0f, -1.0f,  1.0f);glVertex3f( 1.0f, -1.0f,  1.0f);
		glTexCoord2f(1.0f, 1.0f); glNormal3f(1.0f, 1.0f,  1.0f);glVertex3f( 1.0f,  1.0f,  1.0f);
		glTexCoord2f(0.0f, 1.0f); glNormal3f(-1.0f, 1.0f,  1.0f);glVertex3f(-1.0f,  1.0f,  1.0f);
		
		glTexCoord2f(1.0f, 0.0f); glNormal3f(-1.0f, -1.0f,  -1.0f);glVertex3f(-1.0f, -1.0f, -1.0f);
		glTexCoord2f(1.0f, 1.0f); glNormal3f(-1.0f, 1.0f,  -1.0f);glVertex3f(-1.0f,  1.0f, -1.0f);
		glTexCoord2f(0.0f, 1.0f); glNormal3f(1.0f, 1.0f,  -1.0f);glVertex3f( 1.0f,  1.0f, -1.0f);
		glTexCoord2f(0.0f, 0.0f); glNormal3f(1.0f, -1.0f,  1.0f);glVertex3f( 1.0f, -1.0f, -1.0f);
		
		glTexCoord2f(0.0f, 1.0f); glNormal3f(-1.0f, 1.0f,  -1.0f);glVertex3f(-1.0f,  1.0f, -1.0f);
		glTexCoord2f(0.0f, 0.0f); glNormal3f(-1.0f, 1.0f,  1.0f);glVertex3f(-1.0f,  1.0f,  1.0f);
		glTexCoord2f(1.0f, 0.0f); glNormal3f(1.0f, 1.0f,  1.0f);glVertex3f( 1.0f,  1.0f,  1.0f);
		glTexCoord2f(1.0f, 1.0f); glNormal3f(1.0f, 1.0f,  -1.0f);glVertex3f( 1.0f,  1.0f, -1.0f);
	
		glTexCoord2f(1.0f, 1.0f); glNormal3f(-1.0f, -1.0f,  -1.0f);glVertex3f(-1.0f, -1.0f, -1.0f);
		glTexCoord2f(0.0f, 1.0f); glNormal3f(1.0f, -1.0f,  -1.0f);glVertex3f( 1.0f, -1.0f, -1.0f);
		glTexCoord2f(0.0f, 0.0f); glNormal3f(1.0f, -1.0f,  1.0f);glVertex3f( 1.0f, -1.0f,  1.0f);
		glTexCoord2f(1.0f, 0.0f); glNormal3f(-1.0f, -1.0f,  1.0f);glVertex3f(-1.0f, -1.0f,  1.0f);
	
		glTexCoord2f(1.0f, 0.0f); glNormal3f(1.0f, -1.0f,  -1.0f);glVertex3f( 1.0f, -1.0f, -1.0f);
		glTexCoord2f(1.0f, 1.0f); glNormal3f(1.0f, 1.0f,  -1.0f);glVertex3f( 1.0f,  1.0f, -1.0f);
		glTexCoord2f(0.0f, 1.0f); glNormal3f(1.0f, 1.0f,  1.0f);glVertex3f( 1.0f,  1.0f,  1.0f);
		glTexCoord2f(0.0f, 0.0f); glNormal3f(1.0f, -1.0f,  1.0f);glVertex3f( 1.0f, -1.0f,  1.0f);
		
		glTexCoord2f(0.0f, 0.0f); glNormal3f(-1.0f, -1.0f,  -1.0f);glVertex3f(-1.0f, -1.0f, -1.0f);
		glTexCoord2f(1.0f, 0.0f); glNormal3f(-1.0f, -1.0f,  1.0f);glVertex3f(-1.0f, -1.0f,  1.0f);
		glTexCoord2f(1.0f, 1.0f); glNormal3f(-1.0f, 1.0f,  1.0f);glVertex3f(-1.0f,  1.0f,  1.0f);
		glTexCoord2f(0.0f, 1.0f); glNormal3f(-1.0f, 1.0f,  -1.0f);glVertex3f(-1.0f,  1.0f, -1.0f);
	glEnd();
}

	CMatrix lightProjectionMatrix;
	CMatrix lightViewMatrix;
	CMatrix cameraProjectionMatrix;
	CMatrix cameraViewMatrix;

	float white2[4] = {1,1,1,1};
	float black2[4] = {0,0,0,0};
	float gray2[4] = {0.2,0.2,0.2,0.2};
	const int shadowMapSize = 512;
	GLuint shadowMapTexture;
	float lightPosition[4] = {2.0f, 3.0f,-2.0f,1};


void CGame::Init()
{
	
	EXT_EnableARB_Multitexturing(); // enable mulitexturing extension
	if(!EXT_EnableARB_Shadow())
	{
		MessageBox(NULL, _T("Shadow Maps : Can't load shadow extension"), _T("Typhoon Engin"), MB_OK);
	}


	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	//Shading states
	glShadeModel(GL_SMOOTH);
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
	glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);

	//Depth states
	glClearDepth(1.0f);
	glDepthFunc(GL_LEQUAL);
	glEnable(GL_DEPTH_TEST);

	glEnable(GL_CULL_FACE);

	//We use glScale when drawing the scene
	glEnable(GL_NORMALIZE);

	//Create the shadow map texture
	glGenTextures(1, &shadowMapTexture);
	glBindTexture(GL_TEXTURE_2D, shadowMapTexture);
	glTexImage2D(	GL_TEXTURE_2D, 0, GL_DEPTH_COMPONENT, shadowMapSize, shadowMapSize, 0,
					GL_DEPTH_COMPONENT, GL_UNSIGNED_BYTE, NULL);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);

	//Use the color as the ambient and diffuse material
	glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
	glEnable(GL_COLOR_MATERIAL);
	
	//White specular material color, shininess 16
	glMaterialfv(GL_FRONT, GL_SPECULAR, white2);
	glMaterialf(GL_FRONT, GL_SHININESS, 16.0f);

	//Calculate & save matrices
	glPushMatrix();
	
	glLoadIdentity();
	gluPerspective(45.0f, (float)800/600, 1.0f, 1000.0f);
	glGetFloatv(GL_MODELVIEW_MATRIX, cameraProjectionMatrix.matrix);
	
	glLoadIdentity();

	gluLookAt(-2.5f, 3.5f,-2.5f,
				0.0f, 0.0f, 0.0f,
				0.0f, 1.0f, 0.0f);
	glGetFloatv(GL_MODELVIEW_MATRIX, cameraViewMatrix.matrix);
	
	glLoadIdentity();
	gluPerspective(45.0f, 1.0f, 2.0f, 100.0f);
	glGetFloatv(GL_MODELVIEW_MATRIX, lightProjectionMatrix.matrix);
	

	glLoadIdentity();
	gluLookAt(	2.0f, 3.0f,-2.0f,
				0.0f, 0.0f, 0.0f,	
				0.0f, 1.0f, 0.0f);
	glGetFloatv(GL_MODELVIEW_MATRIX, lightViewMatrix.matrix);


	
	
	glPopMatrix();



}
// ---------------------------------------------------------
// CGame::Draw()
// Main loop
// ---------------------------------------------------------
//

float rot;



void CGame::Draw()
{	

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	
	glMatrixMode(GL_PROJECTION);
	glLoadMatrixf(lightProjectionMatrix.matrix);

	glMatrixMode(GL_MODELVIEW);
	glLoadMatrixf(lightViewMatrix.matrix);

	//Use viewport the same size as the shadow map
	glViewport(0, 0, shadowMapSize, shadowMapSize);

	//Draw back faces into the shadow map
	glCullFace(GL_FRONT);

	//Disable color writes, and use flat shading for speed
	glShadeModel(GL_FLAT);
	glColorMask(0, 0, 0, 0);
	
	//Draw the scene
	glPushMatrix();
	glTranslatef(0,0,0);
	glRotatef(rot,1,1,1);
	glColor3f(0.3, 1, 0.5);
	auxSolidBox(1,1,1);
	glPopMatrix();
	glPushMatrix();
	glTranslatef(0,0,0);
	glColor3f(0.3, 0, 1);
	auxSolidBox(10,1,10);
	glPopMatrix();


	//Read the depth buffer into the shadow map texture
	glBindTexture(GL_TEXTURE_2D, shadowMapTexture);
	glCopyTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, 0, 0, shadowMapSize, shadowMapSize);

	//restore states
	glCullFace(GL_BACK);
	glShadeModel(GL_SMOOTH);
	glColorMask(1, 1, 1, 1);
	


	//2nd pass - Draw from camera's point of view
	glClear(GL_DEPTH_BUFFER_BIT);

	glMatrixMode(GL_PROJECTION);
	glLoadMatrixf(cameraProjectionMatrix.matrix);
	
	glMatrixMode(GL_MODELVIEW);
	glLoadMatrixf(cameraViewMatrix.matrix);

	glViewport(0, 0, 800, 600);

	//Use dim light to represent shadowed areas
	glLightfv(GL_LIGHT1, GL_POSITION, lightPosition);
	glLightfv(GL_LIGHT1, GL_AMBIENT, white2);
	glLightfv(GL_LIGHT1, GL_DIFFUSE, white2);
	glLightfv(GL_LIGHT1, GL_SPECULAR, black2);
	glEnable(GL_LIGHT1);
	glEnable(GL_LIGHTING);

glPushMatrix();
	glTranslatef(0,0,0);
	glRotatef(rot,1,1,1);
	glColor3f(0.3, 1, 0.5);
	auxSolidBox(1,1,1);
	glPopMatrix();
	glPushMatrix();
	glTranslatef(0,0,0);
	glColor3f(0.3, 0, 1);
	auxSolidBox(10,1,10);
	glPopMatrix();



	//3rd pass
	//Draw with bright light
	glLightfv(GL_LIGHT1, GL_DIFFUSE, white2);
	glLightfv(GL_LIGHT1, GL_SPECULAR, white2);

	//Calculate texture matrix for projection
	//This matrix takes us from eye space to the light's clip space
	//It is postmultiplied by the inverse of the current view matrix when specifying texgen
	
    static CMatrix biasMatrix(CVector(0.5f, 0.0f, 0.0f, 0.0f),
								CVector(0.0f, 0.5f, 0.0f, 0.0f),
								CVector(0.0f, 0.0f, 0.5f, 0.0f),
								CVector(0.5f, 0.5f, 0.5f, 1.0f));	//bias from [-1, 1] to [0, 1]
	CMatrix textureMatrix=biasMatrix*lightProjectionMatrix*lightViewMatrix;
	
	
	
	//Set up texture coordinate generation.
	glTexGeni(GL_S, GL_TEXTURE_GEN_MODE, GL_EYE_LINEAR);
	glTexGenfv(GL_S, GL_EYE_PLANE, textureMatrix.GetRow(0).value);
	glEnable(GL_TEXTURE_GEN_S);

	glTexGeni(GL_T, GL_TEXTURE_GEN_MODE, GL_EYE_LINEAR);
	glTexGenfv(GL_T, GL_EYE_PLANE, textureMatrix.GetRow(1).value);
	glEnable(GL_TEXTURE_GEN_T);

	glTexGeni(GL_R, GL_TEXTURE_GEN_MODE, GL_EYE_LINEAR);
	glTexGenfv(GL_R, GL_EYE_PLANE, textureMatrix.GetRow(2).value);
	glEnable(GL_TEXTURE_GEN_R);

	glTexGeni(GL_Q, GL_TEXTURE_GEN_MODE, GL_EYE_LINEAR);
	glTexGenfv(GL_Q, GL_EYE_PLANE, textureMatrix.GetRow(3).value);
	glEnable(GL_TEXTURE_GEN_Q);

	
	//Bind & enable shadow map texture
	glBindTexture(GL_TEXTURE_2D, shadowMapTexture);
	glEnable(GL_TEXTURE_2D);	

	//Enable shadow comparison
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_MODE_ARB, GL_COMPARE_R_TO_TEXTURE);

	//Shadow comparison should be true (ie not in shadow) if r<=texture
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_FUNC_ARB, GL_LEQUAL);

	//Shadow comparison should generate an INTENSITY result
	glTexParameteri(GL_TEXTURE_2D, GL_DEPTH_TEXTURE_MODE_ARB, GL_INTENSITY);

	//Set alpha test to discard false comparisons
	glAlphaFunc(GL_GEQUAL, 0.99f);
	glEnable(GL_ALPHA_TEST);

	glPushMatrix();
	glTranslatef(0,0,0);
	glRotatef(rot,1,1,1);
	glColor3f(0.3, 1, 0.5);
	auxSolidBox(1,1,1);
	glPopMatrix();
	glPushMatrix();
	glTranslatef(0,0,0);
	glColor3f(0.3, 0, 1);
	auxSolidBox(10,1,10);
	glPopMatrix();


	//Disable textures and texgen
	glDisable(GL_TEXTURE_2D);

	glDisable(GL_TEXTURE_GEN_S);
	glDisable(GL_TEXTURE_GEN_T);
	glDisable(GL_TEXTURE_GEN_R);
	glDisable(GL_TEXTURE_GEN_Q);

	//Restore other states
	glDisable(GL_LIGHTING);
	glDisable(GL_ALPHA_TEST);






}
// ---------------------------------------------------------
// CGame::Update(double frameTime)
// update
// ---------------------------------------------------------
//


void CGame::Update(double frameTime)
{
	
	if((timeGetTime() - time) >= 5)
	{
	
		rot++;
	/*	
		map->m_player->SetStage(CPlayer::NONE);
	
		if(isClicked==true)
		{
			map->m_player->SetMouseRot(MouseX);
		}
		
		
		if(keys['W']==true)
		{
			map->m_player->SetStage(CPlayer::MOVE_UP);
		
		}
		if(keys['S']==true)
		{
			map->m_player->SetStage(CPlayer::MOVE_DOWN);
			
		}	
		if(keys['A']==true)
		{
			map->m_player->SetStage(CPlayer::MOVE_LEFT);
			
		}	
		if(keys['D']==true)
		{
			map->m_player->SetStage(CPlayer::MOVE_RIGHT);
		}	
	
		
		map->Update();

	*/

		
	
		time = timeGetTime();
	}
	

}
// ---------------------------------------------------------
// CGame::Kill()
// kill the game
// ---------------------------------------------------------
//
void CGame::Kill()
{
//	delete player;
//	delete cam;
//	delete lwo;
//	delete map;
//	delete tex;
	//log->Finish(); delete log;
	delete log3;
	
}
CGame::~CGame()
{

}